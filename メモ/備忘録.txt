XMFLOAT3はfloat型３つ分メモリが確保されてそう。00が4つ並んでるのが3つ並んでたから

条件付きブレークポイントはwhileのとことかに置くとFPSクソ下がるぞ

priority_quereの昇順にしたやつ全部が昇順になってるわけでは無くて入れたタイミングで小さかったのと一番近い値と一番後ろから交換してるだけ
つまり小さいやつとそれと近い場所のやつ交換してるだけだから値ぐちゃぐちゃだぞ。後ろに２番目に小さかった奴とか言っちゃってる
って思ったけどtopの時にちゃんと昇順になってました。ごめんあさい

listとvectorの違い；vectorはメモリを並べておくから、必ずメモリがつながってるので、あとから一つ要素を追加した時にvectorの後ろのメモリが
　空いてなかった場合そのvectorのメモリを丸々どっかに引っ越さなきゃいけないせいで追加する時少し遅い
liseは別々のメモリに置くから、追加するのが速くて、色々早い。その代わり一つの要素にアクセスするために毎回イテレータを使わないといけない
　からちょっとアクセスがめんどくさい。
別々にアクセスしたいときはvector、順番にアクセスしたいときはlistみたいな感じでいいか。後から追加する予定が無い時もvectorでいいかも

.atと[]の違い:.at()は範囲外にアクセスしたときにちゃんと例外(out.of.raugeみたいな)出すけど[]は無理やりアクセスするから変な値が出る

push_backとemplace_backの違い:pushは要素をコピーして渡すからコピーコンストラクタとかが逐一呼ばれるからemplaseより重いらしい。
　emplaceはコンストラクタ引数から直接渡すからpushより早い？のかも

OnCollision内のエラー：OnCollision内で当たり判定を消す処理をしちゃうとOnCollisionはcolliderListをイテレータで回してる最中にあるから、
　そりゃ当たり判定してる時にcolliderListが減っちゃったらイテレータエラー出るよなって感じ

